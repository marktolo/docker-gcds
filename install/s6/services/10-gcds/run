#!/usr/bin/with-contenv bash


if [ ! -f /tmp/state/10-gcds ]; then
sleep 2

	VARIABLE=${VARIABLE:-ENTRY}
	LOG_LEVEL=${LOG_LEVEL:-ERROR}
	FLUSH=${FLUSH:-FALSE}
	LOGFILE=${LOGFILE:-sync.log}
	DRY_RUN=${DRY_RUN:-TRUE}


	## Sanity Check

	mkdir -p /var/log/gcds

	if [ ! -f /assets/config/$CONFIGFILE ]; then
	    echo "No Configuration File Template Found.. Exiting.."
	    exit 0
	fi

	## Start GCDS
	echo 'Starting Google Cloud Directory Sync Services....'
	## Argument Check
	if [ $FLUSH = "TRUE" ];  then
		FLUSH_ARG=--flush
	else
		FLUSH_ARG=
	fi

## Create Encrypted Password Routines
/usr/bin/expect <<EOD
log_file /tmp/expect.log
spawn /usr/local/GoogleCloudDirSync/encrypt-util -c /assets/config/$CONFIGFILE
expect ":"
send $GCDS_PASS\r
interact
expect close
EOD

	tail -n +4 /tmp/expect.log > /tmp/sanitized
	sed -i -e "s/Encrypted value (case sensitive, please cut and paste): //g" /tmp/sanitized

	GCDS_ENCRYPTED_PASS=$(sed -n '3p' /tmp/sanitized)
	GCDS_ENCRYPTED_PASS=$(echo $GCDS_ENCRYPTED_PASS|tr -d '\040\011\012\015')
	GCDS_ENCRYPTED_PASS=${GCDS_ENCRYPTED_PASS:1:${#GCDS_ENCRYPTED_PASS}}
	#GCDS_ENCRYPTED_PASS=$(awk '{$GCDS_ENCRYPTED_PASS=$GCDS_ENCRYPTED_PASS;print}')
	rm -rf /tmp/expect.log /tmp/sanitized


	GCDS_XML_FILE=/usr/local/GoogleCloudDirSync/gcds_conf.xml
	cp /assets/config/$CONFIGFILE $GCDS_XML_FILE

	#start - new xmllint approach
	function sedeasy(){
	  sed -i "s/$(echo $1 | sed -e 's/\([[\/.*]\|\]\)/\\&/g')/$(echo $2 | sed -e 's/[\/&]/\\&/g')/g" $3
	}

	GCDS_XML_PATH="//config/plugins/local/plugin/config/authCredentialsEncrypted"
	GCDS_NEW_PASS="<authCredentialsEncrypted>$GCDS_ENCRYPTED_PASS</authCredentialsEncrypted>"

	GCDS_OLD_PASS=$(echo "cat $GCDS_XML_PATH" | xmllint --shell $GCDS_XML_FILE | sed '/^\/ >/d')

	#echo "old password found: $GCDS_OLD_PASS"
	#echo "encrypted password: $GCDS_ENCRYPTED_PASS"
	#echo "new password found: $GCDS_NEW_PASS"

	sedeasy $GCDS_OLD_PASS $GCDS_NEW_PASS $GCDS_XML_FILE

	#echo "replaced old password $GCDS_OLD_PASS with $GCDS_NEW_PASS in file $GCDS_XML_FILE"
	#end

	  ## Go in endless loop until auth file exists
	while ! [ -f /usr/local/GoogleCloudDirSync/oauthorized ];
	do
	    echo "***"
	    echo "*** CONTAINER NOT FULLY OPERATIONAL"
	    echo "*** You must enter this container and complete the OAUTH2 Manual Verification!"
	    echo "***"
	    echo "*** 'docker exec -it (container-name) bash'"
	    echo "*** 'sh auth.sh'"
	    echo "***"
	    echo 
	    echo "The GCDS Docker Container has recently started and needs to have additional steps completed in order for the GoogleCloudDirectorySync Service to continue. Please login to the host server, enter the GCDS container and execute the 'auth.sh' script." | mailx -v \
	      -r "gcds@selfdesign.org" \
	      -s "[GCDS] OAUTH2 Authorization Required!" \
	      -S smtp="postfix-relay:25" \
	      replaceme@email.com & >/dev/null
	    sleep 120
	done  

		if [ $DRY_RUN  = "TRUE" ];  then 
			echo 'Starting a Dry Run.. Please Change DRY_RUN to FALSE in docker-compose.yml to commit changes..'
			/usr/local/GoogleCloudDirSync/sync-cmd -V
		    /usr/local/GoogleCloudDirSync/sync-cmd -l $LOG_LEVEL -r /var/log/gcds/$LOGFILE -c /usr/local/GoogleCloudDirSync/gcds_conf.xml -o $FLUSH_ARG
		else
            echo "$CRON_EXP /usr/local/GoogleCloudDirSync/sync-cmd -a -l $LOG_LEVEL -r /var/log/gcds/$LOGFILE -c /usr/local/GoogleCloudDirSync/gcds_conf.xml -o $FLUSH_ARG >/dev/null 2>&1" >>/assets/cron/crontab.txt
	    	touch /etc/crontab /etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly
			
			echo 'Starting Live Run..'
		    /usr/local/GoogleCloudDirSync/sync-cmd -a -l $LOG_LEVEL -r /var/log/gcds/$LOGFILE -c /usr/local/GoogleCloudDirSync/gcds_conf.xml -o $FLUSH_ARG
		fi

	mkdir -p /tmp/state/
	echo 'Initialization Complete' >/tmp/state/10-gcds
fi

echo ''
echo ''
exec tail -f /var/log/gcds/$LOGFILE

